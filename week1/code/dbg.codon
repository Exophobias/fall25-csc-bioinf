def reverse_complement(key: str) -> str:
    complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    
    result_list: List[str] = []
    for i in range(len(key) - 1, -1, -1):
        result_list.append(complement.get(key[i], key[i]))
    return ''.join(result_list)


class Node:
    _children: Set[int]
    _count: int
    kmer: str
    visited: bool
    depth: int
    max_depth_child: Optional[int]
    
    def __init__(self, kmer: str):
        self._children = set()
        self._count = 0
        self.kmer = kmer
        self.visited = False
        self.depth = 0
        self.max_depth_child = None
    
    def add_child(self, kmer_idx: int):
        self._children.add(kmer_idx)
    
    def increase(self):
        self._count += 1
    
    def reset(self):
        self.visited = False
        self.depth = 0
        self.max_depth_child = None
    
    def get_count(self) -> int:
        return self._count
    
    def get_children(self) -> List[int]:
        return list(self._children)
    
    def remove_children(self, target: Set[int]):
        self._children = self._children - target


class DBG:
    k: int
    nodes: Dict[int, Node]
    kmer2idx: Dict[str, int]
    kmer_count: int
    
    def __init__(self, k: int, data_list: List[List[str]]):
        self.k = k
        self.nodes = {}
        self.kmer2idx = {}
        self.kmer_count = 0
        self._check(data_list)
        self._build(data_list)
    
    def _check(self, data_list: List[List[str]]):
        assert len(data_list) > 0
        assert self.k <= len(data_list[0][0])
    
    def _build(self, data_list: List[List[str]]):
        for data in data_list:
            for original in data:
                rc = reverse_complement(original)
                for i in range(len(original) - self.k - 1):
                    self._add_arc(original[i: i + self.k], original[i + 1: i + 1 + self.k])
                    self._add_arc(rc[i: i + self.k], rc[i + 1: i + 1 + self.k])
    
    def show_count_distribution(self):
        count: List[int] = [0] * 30
        for idx in self.nodes:
            node_count = self.nodes[idx].get_count()
            if node_count < 30:
                count[node_count] += 1
        print(count[0:10])
    
    def _add_node(self, kmer: str) -> int:
        if kmer not in self.kmer2idx:
            self.kmer2idx[kmer] = self.kmer_count
            self.nodes[self.kmer_count] = Node(kmer)
            self.kmer_count += 1
        idx = self.kmer2idx[kmer]
        self.nodes[idx].increase()
        return idx
    
    def _add_arc(self, kmer1: str, kmer2: str):
        idx1 = self._add_node(kmer1)
        idx2 = self._add_node(kmer2)
        self.nodes[idx1].add_child(idx2)
    
    def _get_count(self, child: int) -> int:
        return self.nodes[child].get_count()
    
    def _get_sorted_children(self, idx: int) -> List[int]:
        children = self.nodes[idx].get_children()
        # Sort children by count in descending order
        sorted_children: List[int] = []
        for child in children:
            sorted_children.append(child)
        
        # Simple bubble sort for sorting by count
        n = len(sorted_children)
        for i in range(n):
            for j in range(0, n - i - 1):
                if self._get_count(sorted_children[j]) < self._get_count(sorted_children[j + 1]):
                    sorted_children[j], sorted_children[j + 1] = sorted_children[j + 1], sorted_children[j]
        
        return sorted_children
    
    def _get_depth(self, idx: int) -> int:
        if not self.nodes[idx].visited:
            self.nodes[idx].visited = True
            children = self._get_sorted_children(idx)
            max_depth = 0
            max_child: Optional[int] = None
            for child in children:
                depth = self._get_depth(child)
                if depth > max_depth:
                    max_depth = depth
                    max_child = child
            self.nodes[idx].depth = max_depth + 1
            self.nodes[idx].max_depth_child = max_child
        return self.nodes[idx].depth
    
    def _reset(self):
        for idx in self.nodes:
            self.nodes[idx].reset()
    
    def _get_longest_path(self) -> List[int]:
        max_depth = 0
        max_idx: Optional[int] = None
        for idx in self.nodes:
            depth = self._get_depth(idx)
            if depth > max_depth:
                max_depth = depth
                max_idx = idx
        
        path: List[int] = []
        while max_idx is not None:
            path.append(max_idx)
            max_idx = self.nodes[max_idx].max_depth_child
        return path
    
    def _delete_path(self, path: List[int]):
        path_set = set(path)
        # Remove nodes in path from children of other nodes
        for idx in self.nodes:
            if idx not in path_set:
                self.nodes[idx].remove_children(path_set)
        
        # Delete nodes in path
        for idx in path:
            if idx in self.nodes:
                del self.nodes[idx]
    
    def _concat_path(self, path: List[int]) -> Optional[str]:
        if len(path) < 1:
            return None
        concat = str(self.nodes[path[0]].kmer)
        for i in range(1, len(path)):
            concat += self.nodes[path[i]].kmer[-1]
        return concat
    
    def get_longest_contig(self) -> Optional[str]:
        self._reset()
        path = self._get_longest_path()
        contig = self._concat_path(path)
        self._delete_path(path)
        return contig